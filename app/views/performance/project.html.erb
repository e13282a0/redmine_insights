<% content_for :header_tags do %>
  <%= javascript_include_tag "echarts.min.js",:plugin => 'redmine_insights'%>
  <!--<%= javascript_include_tag "require.min.js",:plugin => 'redmine_insights'%>-->
  <%= javascript_include_tag "moment.min.js", :plugin => 'redmine_insights'%>
  <!--<%= javascript_include_tag "vue.min.js", :plugin => 'redmine_insights'%>-->
  
<% end %>
<h2>PerformanceController#project</h2>

<div id="areaChart" style="width: 100%;height:400px;"></div>
<hr />
<%= @project.id %>
<hr />
<%= @issues %>
<hr />
<%= @users %>
<hr />
<%= @time_entries %>

<script type="text/javascript">
    let timeEntries = JSON.parse('<%= @time_entries.to_json.html_safe() %>');
    let issues = JSON.parse('<%= @issues.to_json.html_safe() %>');
    let users = JSON.parse('<%= @users.to_json.html_safe() %>');
    //debugger;

    function getTimeBeam(weeks) {
      let result = [];
      let runningDate = moment();
      for (let i = 0; i <= weeks; i++) {
        result.push({ week: runningDate.week(), year: runningDate.year() });
        runningDate = runningDate.subtract(7, "days");
      }
      return result.reverse();
    }

    function movingAvg(array, count) {
      const _count = Math.min(count,array.length)*-1;
      const arrayToSum = array.slice(_count);
      const avg = arrayToSum.reduce((a, b) => a + (isNaN(b) ? 0 : b), 0) / arrayToSum.length;
      return avg;
    }

    let topLevelIssues = issues.filter((issue) => {
      return issue.isTopLevel;
    });

    let series = [];
    let legend = [];
    let timeBeam = getTimeBeam(52);
    topLevelIssues.forEach(function (issue) {

      legend.push(issue.subject);

      // create hours beam and push it to column
      let hourBeam = timeBeam.map(function (elm) {
          relatedTimeEntries = timeEntries.filter(function(timeEntry) { return (timeEntry.topLevelID == issue.issueID && timeEntry.week == elm.week && timeEntry.year == elm.year)});
          elm = relatedTimeEntries.reduce(function (sum, current) {return sum + current.hours;},0);
          return elm;
        });
      series.push({
        name: issue.subject,
        type:'line',
        stack:'total',
        data:hourBeam
      })
    });

    // average lines for 4weeks and 12 weeks
    let started=false;
    let counter=0;
    let sumArray=[];
    let avg4Weeks=[];
    let avg12Weeks=[];
    for (let i=0; i<timeBeam.length;i++) {
      relatedTimeEntries = timeEntries.filter(function(timeEntry) { return (timeEntry.week == timeBeam[i].week && timeEntry.year == timeBeam[i].year)});
      let weekSum = relatedTimeEntries.reduce(function (sum, current) {return sum + current.hours;},0);
      sumArray.push(weekSum);
      started = started || weekSum>0;
      if (started) {
        counter+=1;
        avg4Weeks.push(movingAvg(sumArray, Math.min(4,counter)));
        avg12Weeks.push(movingAvg(sumArray, Math.min(12,counter)));
      } else {
        avg4Weeks.push(0);
        avg12Weeks.push(0);
      }
    }
    series.push({
        name: '4 week avg',
        type:'line',
        data:avg4Weeks,
        smooth: true,
        lineStyle: {
        color: '#888888',
        width: 1,
        type: 'dashed'
      },
      });
    legend.push('4 week avg')
      series.push({
        name: '12 week avg',
        type:'line',
        data:avg12Weeks,
        smooth: true,
        lineStyle: {
        color: '#000000',
        width: 1,
        type: 'dashed'
      },
      });
      legend.push('12 week avg')


  

      var myChart = echarts.init(document.getElementById('areaChart'));
      var option;

option = {
  title: {
    text: 'Stacked Line'
  },
  tooltip: {
    trigger: 'axis'
  },
  legend: {
    data: legend
  },
  grid: {
    left: '3%',
    right: '4%',
    bottom: '3%',
    containLabel: true
  },
  toolbox: {
    feature: {
      saveAsImage: {}
    }
  },
  xAxis: {
    type: 'category',
    boundaryGap: false,
    data: getTimeBeam(52).map(elm => elm.week+'/'+elm.year)
  },
  yAxis: {
    type: 'value'
  },
  series: series
};

      // Display the chart using the configuration items and data just specified.
      myChart.setOption(option);
  </script>
